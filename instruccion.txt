Programación Concurrente 7 - 7A
Corregir código Semaforo Filosofos
1.- El siguiente código tiene un error de desbordamiento de datos, corregirlo para poder tener una salida optima, aquí ya aplicamos la semaforización 
(recuerden todos lo hilos deben aplicarse de forma adecuada , eso significa que cada uno debe llevar un orden y sincronización para su pase y ejecución .

2.-  ENTREGA: 

* URL REPOSITORIO (AGREGAR COMO COMENTARIO)

* IMAGEN DE LA SALIDA TERMINAL

RECUERDEN SEMAFORO SOLO ES UN CONCEPTO DE INTEGRACIÓN ESCALABLE 
----------------------------------------------------------------------------------------------------------------------------------------------------------

import threading
import time

class TenedorFilosofo(threading.Thread):
    def __init__(self, tenedores, filosofosNum):
        threading.Thread.__init__(self)
        self.tenedores = tenedores
        self.filosofosNum = filosofosNum
        self.datoTemporal =  self.filosofosNum + 1 % 5
   
    def hilosFilosofos(self):
        while True:
            print("Filosofo iniciando", self.filosofosNum)
            time.sleep(2)
            print("Filosofo ", self.filosofosNum, "pasando tenedor del lado izquierdo")
            self.tenedores[self.filosofosNum].acquire()
            time.sleep(2)
            print("Filosofo ", self.filosofosNum, "recoge tenedor del lado derecho")
            self.tenedores[self.datoTemporal].acquire()
            time.sleep(2)
            print("Filosofo ", self.filosofosNum, "libre derecho")
            self.tenedores[self.datoTemporal].release()
            time.sleep(2)
            print("Filosofo ", self.filosofosNum, "libre izquierdo")
            self.tenedores[self.filosofosNum].release()
            time.sleep(2)
   
    def run(self):
        self.hilosFilosofos()


tenedorArray = [1,1,1,1,1]

for i in range(0,5):
    print("for uno: ", i)
    tenedorArray[i] = threading.BoundedSemaphore(1)

for i in range(0,5):
    print("for dos: ", i)
    total = TenedorFilosofo(tenedorArray, i)
    total.start()